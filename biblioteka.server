-- MySQL Script generated by MySQL Workbench
-- wto, 31 maj 2022, 22:04:17
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema Lib
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Lib` ;

-- -----------------------------------------------------
-- Schema Lib
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Lib` ;
USE `Lib` ;

-- -----------------------------------------------------
-- Table `Lib`.`Autorzy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Autorzy` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Autorzy` (
  `Id_autora` INT NOT NULL AUTO_INCREMENT,
  `Imie` VARCHAR(20) NOT NULL,
  `Nazwisko` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`Id_autora`),
  INDEX `Idx_Imie_Nazwisko` (`Imie` ASC, `Nazwisko` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Ksiazki`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Ksiazki` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Ksiazki` (
  `Id_ksiazki` INT NOT NULL AUTO_INCREMENT,
  `Tytul` VARCHAR(100) NOT NULL,
  `ISBN` VARCHAR(14) NULL,
  `Rok_wydania` YEAR(4) NULL,
  PRIMARY KEY (`Id_ksiazki`),
  INDEX `Idx_Tytul` (`Tytul` ASC) VISIBLE,
  INDEX `Idx_ISBN` (`ISBN` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Kategorie`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Kategorie` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Kategorie` (
  `Id_kategorii` INT NOT NULL AUTO_INCREMENT,
  `Nazwa_kategorii` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`Id_kategorii`),
  INDEX `Idx_Nazwa_kategorii` (`Nazwa_kategorii` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Wydawnictwa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Wydawnictwa` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Wydawnictwa` (
  `Id_wydawnictwa` INT NOT NULL AUTO_INCREMENT,
  `Nazwa_wydawnictwa` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Id_wydawnictwa`),
  INDEX `Idx_Nazwa_wydawnictwa` (`Nazwa_wydawnictwa` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Egzemplarze`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Egzemplarze` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Egzemplarze` (
  `Id_egzemplarza` INT NOT NULL AUTO_INCREMENT,
  `Id_ksiazki` INT NOT NULL,
  `Id_wydawnictwa` INT NOT NULL,
  `Dostepny` INT NOT NULL,
  PRIMARY KEY (`Id_egzemplarza`),
  INDEX `Idx_Id_ksiazki` (`Id_ksiazki` ASC) VISIBLE,
  INDEX `Idx_Id_wydawnictwa` (`Id_wydawnictwa` ASC) VISIBLE,
  INDEX `Idx_Dostepny` (`Dostepny` ASC) VISIBLE,
  CONSTRAINT `FK_Ksiazki_IN_Egzemplarze`
    FOREIGN KEY (`Id_ksiazki`)
    REFERENCES `Lib`.`Ksiazki` (`Id_ksiazki`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Wydawnictwa_IN_Egzemplarze`
    FOREIGN KEY (`Id_wydawnictwa`)
    REFERENCES `Lib`.`Wydawnictwa` (`Id_wydawnictwa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Adresy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Adresy` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Adresy` (
  `id_adresu` INT NOT NULL AUTO_INCREMENT,
  `Miasto` VARCHAR(20) NOT NULL,
  `Kod_pocztowy` VARCHAR(7) NOT NULL,
  `Ulica` VARCHAR(30) NOT NULL,
  `Numer` INT NOT NULL,
  PRIMARY KEY (`id_adresu`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Osoby`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Osoby` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Osoby` (
  `Id_osoby` INT NOT NULL AUTO_INCREMENT,
  `Imie` VARCHAR(20) NOT NULL,
  `Nazwisko` VARCHAR(20) NOT NULL,
  `Id_adresu` INT NOT NULL,
  `Telefon` VARCHAR(10) NOT NULL,
  `Email` VARCHAR(45) NULL,
  PRIMARY KEY (`Id_osoby`),
  INDEX `Idx_Imie_Nazwisko` (`Imie` ASC, `Nazwisko` ASC) VISIBLE,
  INDEX `Idx_Id_adresu` (`Id_adresu` ASC) VISIBLE,
  CONSTRAINT `FK_Adresy_IN_Osoby`
    FOREIGN KEY (`Id_adresu`)
    REFERENCES `Lib`.`Adresy` (`id_adresu`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Czytelnicy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Czytelnicy` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Czytelnicy` (
  `Id_karty` INT NOT NULL AUTO_INCREMENT,
  `Id_osoby` INT NOT NULL,
  PRIMARY KEY (`Id_karty`),
  INDEX `Idx_Id_osoby` (`Id_osoby` ASC) VISIBLE,
  CONSTRAINT `FK_Osoby_IN_Czytelnicy`
    FOREIGN KEY (`Id_osoby`)
    REFERENCES `Lib`.`Osoby` (`Id_osoby`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Bibliotekarze`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Bibliotekarze` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Bibliotekarze` (
  `Id_bibliotekarza` INT NOT NULL AUTO_INCREMENT,
  `Id_osoby` INT NOT NULL,
  `Login` VARCHAR(20) NOT NULL,
  `Haslo` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`Id_bibliotekarza`),
  INDEX `Idx_Id_osoby` (`Id_osoby` ASC) VISIBLE,
  UNIQUE INDEX `Login_UNIQUE` (`Login` ASC) VISIBLE,
  CONSTRAINT `FK_Osoby_IN_Bibliotekarze`
    FOREIGN KEY (`Id_osoby`)
    REFERENCES `Lib`.`Osoby` (`Id_osoby`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Wypozyczenia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Wypozyczenia` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Wypozyczenia` (
  `Id_wypozyczenia` INT NOT NULL AUTO_INCREMENT,
  `Id_karty` INT NOT NULL,
  `Id_bibliotekarza` INT NOT NULL,
  `Id_egzemplarza` INT NOT NULL,
  `Data_wypozyczenia` DATE NOT NULL,
  `Termin_oddania` DATE NULL,
  PRIMARY KEY (`Id_wypozyczenia`),
  INDEX `Idx_Id_karty` (`Id_karty` ASC) VISIBLE,
  INDEX `Idx_Id_bibliotekarza` (`Id_bibliotekarza` ASC) VISIBLE,
  INDEX `Idx_Id_egzemplarza` (`Id_egzemplarza` ASC) VISIBLE,
  CONSTRAINT `FK_Egzemplarze_IN_Wypozyczenia`
    FOREIGN KEY (`Id_egzemplarza`)
    REFERENCES `Lib`.`Egzemplarze` (`Id_egzemplarza`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Czytelnicy_IN_Wypozyczenia`
    FOREIGN KEY (`Id_karty`)
    REFERENCES `Lib`.`Czytelnicy` (`Id_karty`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Bibliotekarze_IN_Wypozyczenia`
    FOREIGN KEY (`Id_bibliotekarza`)
    REFERENCES `Lib`.`Bibliotekarze` (`Id_bibliotekarza`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Rezerwacje`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Rezerwacje` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Rezerwacje` (
  `Id_rezerwacji` INT NOT NULL AUTO_INCREMENT,
  `Id_ksiazki` INT NOT NULL,
  `Id_karty` INT NOT NULL,
  `Numer_w_kolejce` INT NOT NULL,
  `Data_rezerwacji` DATE NULL,
  PRIMARY KEY (`Id_rezerwacji`),
  INDEX `Idx_Id_ksiazki` (`Id_ksiazki` ASC) VISIBLE,
  INDEX `Idx_Id_karty` (`Id_karty` ASC) VISIBLE,
  CONSTRAINT `FK_Ksiazki_IN_Rezerwacje`
    FOREIGN KEY (`Id_ksiazki`)
    REFERENCES `Lib`.`Ksiazki` (`Id_ksiazki`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Czytelnicy_IN_Rezerwacje`
    FOREIGN KEY (`Id_karty`)
    REFERENCES `Lib`.`Czytelnicy` (`Id_karty`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Ksiazki_has_Autorzy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Ksiazki_has_Autorzy` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Ksiazki_has_Autorzy` (
  `Id_ksiazki` INT NOT NULL,
  `Id_autora` INT NOT NULL,
  PRIMARY KEY (`Id_ksiazki`, `Id_autora`),
  INDEX `Idx_Id_autora` (`Id_autora` ASC) VISIBLE,
  INDEX `Idx_Id_ksiazki` (`Id_ksiazki` ASC) VISIBLE,
  CONSTRAINT `FK_Ksiazki_IN_Ksiazki_has_Autorzy`
    FOREIGN KEY (`Id_ksiazki`)
    REFERENCES `Lib`.`Ksiazki` (`Id_ksiazki`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Autorzy_IN_Ksiazki_has_Autorzy`
    FOREIGN KEY (`Id_autora`)
    REFERENCES `Lib`.`Autorzy` (`Id_autora`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Lib`.`Ksiazki_has_Kategorie`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Ksiazki_has_Kategorie` ;

CREATE TABLE IF NOT EXISTS `Lib`.`Ksiazki_has_Kategorie` (
  `Id_ksiazki` INT NOT NULL,
  `Id_kategorii` INT NOT NULL,
  PRIMARY KEY (`Id_ksiazki`, `Id_kategorii`),
  INDEX `Idx_Id_kategorii` (`Id_kategorii` ASC) VISIBLE,
  INDEX `Idx_Id_ksiazki` (`Id_ksiazki` ASC) VISIBLE,
  CONSTRAINT `FK_Ksiazki_IN_Ksiazki_has_Kategorie`
    FOREIGN KEY (`Id_ksiazki`)
    REFERENCES `Lib`.`Ksiazki` (`Id_ksiazki`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Kategorie_IN_Ksiazki_has_Kategorie`
    FOREIGN KEY (`Id_kategorii`)
    REFERENCES `Lib`.`Kategorie` (`Id_kategorii`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `Lib` ;

-- -----------------------------------------------------
-- Placeholder table for view `Lib`.`Wyszukaj`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Lib`.`Wyszukaj` (`Tytul` INT, `Rok_wydania` INT, `Dostepny` INT, `Imie` INT, `Nazwisko` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Lib`.`Zarezerwowane`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Lib`.`Zarezerwowane` (`Tytul` INT, `Numer_w_kolejce` INT, `Id_karty` INT, `Imie` INT, `Nazwisko` INT, `Email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Lib`.`Wypozyczone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Lib`.`Wypozyczone` (`Tytul` INT, `Id_egzemplarza` INT, `Data_wypozyczenia` INT, `Termin_oddania` INT, `Id_bibliotekarza` INT, `Id_karty` INT, `Imie` INT, `Nazwisko` INT, `Telefon` INT);

-- -----------------------------------------------------
-- View `Lib`.`Wyszukaj`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Wyszukaj`;
DROP VIEW IF EXISTS `Lib`.`Wyszukaj` ;
USE `Lib`;
CREATE OR REPLACE VIEW `Wyszukaj` AS
SELECT K.Tytul, K.Rok_wydania, E.Dostepny, A.Imie, A.Nazwisko
FROM Ksiazki AS K
INNER JOIN Egzemplarze AS E ON K.Id_ksiazki = E.Id_ksiazki
INNER JOIN Ksiazki_has_Autorzy AS KSI ON KSI.Id_ksiazki = K.Id_ksiazki
INNER JOIN Autorzy AS A ON A.Id_autora = KSI.Id_autora
WHERE K.Tytul LIKE 'Harry%';

-- -----------------------------------------------------
-- View `Lib`.`Zarezerwowane`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Zarezerwowane`;
DROP VIEW IF EXISTS `Lib`.`Zarezerwowane` ;
USE `Lib`;
CREATE OR REPLACE VIEW `Zarezerwowane` AS
SELECT K.Tytul, R.Numer_w_kolejce, C.Id_karty, O.Imie, O.Nazwisko, O.Email
FROM Rezerwacje AS R
INNER JOIN Ksiazki AS K ON K.Id_ksiazki = R.Id_ksiazki
INNER JOIN Czytelnicy AS C ON C.Id_karty = R.Id_karty
INNER JOIN Osoby AS O ON O.Id_osoby = C.Id_osoby;

-- -----------------------------------------------------
-- View `Lib`.`Wypozyczone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Lib`.`Wypozyczone`;
DROP VIEW IF EXISTS `Lib`.`Wypozyczone` ;
USE `Lib`;
CREATE OR REPLACE VIEW `Wypozyczone` AS
SELECT K.Tytul, E.Id_egzemplarza, W.Data_wypozyczenia, W.Termin_oddania, W.Id_bibliotekarza, C.Id_karty, O.Imie, O.Nazwisko, O.Telefon
FROM Wypozyczenia AS W
INNER JOIN Egzemplarze AS E ON E.Id_egzemplarza = W.Id_egzemplarza
INNER JOIN Ksiazki AS K ON K.Id_ksiazki = E.Id_ksiazki
INNER JOIN Czytelnicy AS C ON C.Id_karty = W.Id_karty
INNER JOIN Osoby AS O ON O.Id_osoby = C.Id_osoby;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;















CREATE DEFINER=`root`@`localhost` FUNCTION `Add_adres`(miasto VARCHAR(20), kod VARCHAR(20), ulica VARCHAR(20), numer INT) RETURNS int
BEGIN
	IF NOT EXISTS (SELECT * FROM Adresy AS A WHERE A.Miasto = miasto AND A.Kod_pocztowy = kod AND A.Ulica = ulica AND A.Numer = numer) THEN
		INSERT INTO Adresy(Miasto,Kod_pocztowy,Ulica,Numer) VALUES(miasto,kod,ulica,numer);
        RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_autor`(imie VARCHAR(20), nazwisko VARCHAR(20)) RETURNS int
BEGIN
	IF NOT EXISTS (SELECT * FROM Autorzy AS A WHERE A.Imie = imie AND A.Nazwisko = nazwisko) THEN
		INSERT INTO Autorzy(Imie,Nazwisko) VALUES(imie,nazwisko);
        RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_bibliotekarz`(imie VARCHAR(20), nazwisko VARCHAR(20), miasto VARCHAR(20), kod VARCHAR(20), ulica VARCHAR(20), numer INT, login VARCHAR(20), haslo 	VARCHAR(20)) RETURNS int
BEGIN

	IF EXISTS (SELECT * FROM Bibliotekarze AS B WHERE B.Login = login) THEN 
		RETURN 2;
	END IF;


	IF NOT EXISTS (SELECT * FROM (SELECT * FROM Adresy AS A WHERE A.Miasto = miasto AND A.Ulica = ulica AND A.Kod_pocztowy = kod AND A.Numer = numer) AS ADR, (SELECT * FROM Osoby AS O WHERE O.Imie= imie AND O.Nazwisko = nazwisko) AS OSA, Bibliotekarze AS B WHERE OSA.id_adresu = ADR.id_adresu AND OSA.Id_osoby = B.Id_osoby)
	THEN
		INSERT INTO Bibliotekarze(Login,Haslo,Id_osoby) SELECT login,haslo,O.Id_osoby FROM (SELECT * FROM Adresy AS A WHERE A.Miasto = miasto AND A.Ulica = ulica AND A.Kod_pocztowy = kod AND A.Numer = numer) AS ADR, Osoby AS O WHERE O.Imie = imie AND O.Nazwisko = nazwisko AND O.Id_adresu = ADR.id_adresu;
        RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_czytelnik`(imie VARCHAR(20), nazwisko VARCHAR(20), miasto VARCHAR(20), kod VARCHAR(20), ulica VARCHAR(20), numer INT) RETURNS int
BEGIN
IF NOT EXISTS (SELECT * FROM (SELECT * FROM Adresy AS A WHERE A.Miasto = miasto AND A.Ulica = ulica AND A.Kod_pocztowy = kod AND A.Numer = numer) AS ADR, (SELECT * FROM Osoby AS O WHERE O.Imie = imie AND O.Nazwisko = nazwisko) AS OSA, Czytelnicy AS C WHERE OSA.id_adresu = ADR.id_adresu AND OSA.Id_osoby = C.Id_osoby)
	THEN
		INSERT INTO Czytelnicy(Id_osoby) SELECT O.Id_osoby FROM (SELECT * FROM Adresy AS A WHERE A.Miasto = miasto AND A.Ulica = ulica AND A.Kod_pocztowy = kod AND A.Numer = numer) AS ADR, Osoby AS O WHERE O.Imie = imie AND O.Nazwisko = nazwisko AND O.Id_adresu = ADR.id_adresu;
        RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_egzemplarz`(nazwa VARCHAR(50), wydawnictwo VARCHAR(30)) RETURNS int
BEGIN
	INSERT INTO Egzemplarze (Id_ksiazki,Id_wydawnictwa,Dostepny)  SELECT Ksiazki.Id_ksiazki, Wydawnictwa.Id_wydawnictwa, 1 FROM Ksiazki INNER JOIN Wydawnictwa WHERE Ksiazki.tytul = nazwa AND Wydawnictwa.Nazwa_wydawnictwa = wydawnictwo;
	RETURN 1;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_kategoria`(kategoria VARCHAR(45)) RETURNS int
BEGIN
	IF NOT EXISTS (SELECT * FROM Library.Kategorie AS K WHERE K.Nazwa_kategorii = kategoria ) THEN
		INSERT INTO Library.Kategorie (Nazwa_kategorii) VALUES(kategoria);
        RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_ksiazka`(nazwa VARCHAR(50), numer VARCHAR(14), rok YEAR(4)) RETURNS int
BEGIN
	DECLARE rok_wydania YEAR DEFAULT NULL;
	DECLARE isbn VARCHAR(14) DEFAULT NULL;
	
    IF(rok != 0) THEN
	SET rok_wydania = rok;
	END IF;
    
    IF(numer != '') THEN
    SET isbn = numer;
    END IF;

	IF NOT EXISTS ( SELECT * FROM Ksiazki AS K WHERE K.Tytul = nazwa) THEN
		INSERT INTO Ksiazki(Tytul,ISBN,Rok_wydania) VALUES(nazwa,isbn,rok_wydania);
        RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_ksiazka_do_autora`(imie VARCHAR(20), nazwisko VARCHAR(20), nazwa VARCHAR(50)) RETURNS int
BEGIN
    IF NOT EXISTS ( SELECT * FROM ( SELECT * FROM Ksiazki, Autorzy WHERE Tytul = nazwa AND Imie = imie AND Nazwisko = nazwisko) AS OPE, Ksiazki_has_Autorzy AS KHA
    WHERE KHA.Id_ksiazki = OPE.Id_ksiazki AND KHA.Id_autora = OPE.Id_autora)
	THEN
	    INSERT INTO Ksiazki_has_Autorzy (Id_ksiazki,Id_autora)  SELECT Ksiazki.Id_ksiazki, Autorzy.Id_autora FROM Ksiazki INNER JOIN Autorzy  WHERE Ksiazki.Tytul = nazwa AND Autorzy.Imie = imie AND Autorzy.Nazwisko = nazwisko;
		RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_ksiazka_do_kategorii`(nazwa VARCHAR(50), kategoria VARCHAR(45)) RETURNS int
BEGIN
    IF NOT EXISTS ( SELECT * FROM ( SELECT * FROM Ksiazki, Kategorie WHERE Tytul = nazwa AND Nazwa_kategorii = kategoria) AS OPE, Ksiazki_has_Kategorie AS KHK
    WHERE KHK.Id_ksiazki = OPE.Id_ksiazki AND KHK.Id_kategorii = OPE.Id_kategorii)
	THEN
		INSERT INTO Ksiazki_has_Kategorie (Id_ksiazki,Id_kategorii)  SELECT Ksiazki.Id_ksiazki, Kategorie.Id_Kategorii FROM Ksiazki INNER JOIN Kategorie WHERE Ksiazki.Tytul = nazwa AND Kategorie.Nazwa_kategorii = kategoria;
		RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_osoba`(imie VARCHAR(20), nazwisko VARCHAR(20), miasto VARCHAR(20), kod VARCHAR(20), ulica VARCHAR(20), numer INT, telefon VARCHAR(10), email VARCHAR(30)) RETURNS int
BEGIN

DECLARE mail VARCHAR(30) DEFAULT NULL;
IF (email != '') THEN
SET mail = email;
END IF;

 IF NOT EXISTS (SELECT * FROM (SELECT * FROM Adresy WHERE Miasto = miasto AND Ulica = ulica AND Kod_pocztowy = kod AND Numer = numer) AS A, Osoby AS O WHERE O.Imie = imie AND O.Nazwisko = nazwisko AND A.Id_adresu = O.Id_adresu)
	THEN
	INSERT INTO Osoby(Imie,Nazwisko,Telefon,Email,Id_adresu) SELECT imie,nazwisko,telefon,mail,A.id_adresu FROM Adresy AS A WHERE A.Miasto = miasto AND A.Ulica = ulica AND A.Kod_pocztowy = kod AND A.Numer = numer;
	RETURN 1;
	END IF;
RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_rezerwacja`(karta INT, tytul VARCHAR(50), kolejka INT) RETURNS int
BEGIN
	INSERT INTO Rezerwacje(Id_karty,Numer_w_kolejce,Data_rezerwacji,Id_ksiazki) SELECT karta,kolejka,current_date(),K.Id_ksiazki FROM Ksiazki AS K WHERE K.Tytul = tytul;
RETURN 1;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_wydawnictwo`(wydawnictwo VARCHAR(30)) RETURNS int
BEGIN
	IF NOT EXISTS ( SELECT * FROM Wydawnictwa AS W WHERE W.Nazwa_wydawnictwa = wydawnictwo) THEN
	    INSERT INTO Wydawnictwa (Nazwa_wydawnictwa) VALUES(wydawnictwo);
		RETURN 1;
	END IF;
	RETURN 0;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `Add_wypozyczenie`(karta INT, egzemplarz INT, bibliotekarz INT) RETURNS int
BEGIN
	INSERT INTO Wypozyczenia(Id_karty,Id_bibliotekarza,Id_egzemplarza,Data_wypozyczenia,Termin_oddania) VALUES(karta,bibliotekarz,egzemplarz,current_date(),current_date() + INTERVAL 14 DAY);
	UPDATE Egzemplarze SET Dostepny = 0 WHERE Id_egzemplarza = egzemplarz;
RETURN 1;
END





CREATE DEFINER=`root`@`localhost` PROCEDURE `DodawanieBibliotekarza`(imie VARCHAR(20), nazwisko VARCHAR(20), miasto VARCHAR(20), kod VARCHAR(20), ulica VARCHAR(20), numer INT, telefon VARCHAR(10), email VARCHAR(30), login VARCHAR(20), haslo VARCHAR(20))
BEGIN
    SELECT Add_adres(miasto,kod,ulica,numer),
	Add_osoba(imie,nazwisko,miasto,kod,ulica,numer,telefon,email),
    Add_bibliotekarz(imie,nazwisko,miasto,kod,ulica,numer,login,haslo) FROM dual;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `DodawanieCzytelnika`(imie VARCHAR(20), nazwisko VARCHAR(20), miasto VARCHAR(20), kod VARCHAR(20), ulica VARCHAR(20), numer INT, telefon VARCHAR(10), email VARCHAR(30))
BEGIN
    SELECT Add_adres(miasto,kod,ulica,numer),
	Add_osoba(imie,nazwisko,miasto,kod,ulica,numer,telefon,email),
    Add_czytelnik(imie,nazwisko,miasto,kod,ulica,numer) FROM dual;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `DodawanieKsiazki`(imie VARCHAR(20), nazwisko VARCHAR(30), nazwa VARCHAR(50), numer VARCHAR(14), rok YEAR(4), kategoria VARCHAR(45), wydawnictwo VARCHAR(30))
BEGIN
	SELECT Add_autor(imie,nazwisko),
    Add_kategoria(kategoria),
	Add_ksiazka(nazwa,numer,rok),
	Add_ksiazka_do_autora(imie,nazwisko,nazwa),
	Add_ksiazka_do_kategorii(nazwa,kategoria),
	Add_wydawnictwo(wydawnictwo),
	Add_egzemplarz(nazwa,wydawnictwo) FROM dual;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `DodawanieRezerwacji`(karta INT, tytul VARCHAR(50))
BEGIN
	
    DECLARE kolejkowicze INT DEFAULT NULL;
	DECLARE id INT DEFAULT NULL;

	SET id = (SELECT K.Id_ksiazki FROM Ksiazki AS K WHERE K.Tytul = tytul);
		
	IF EXISTS (SELECT * FROM Czytelnicy AS C WHERE C.Id_karty = karta)THEN
		IF NOT EXISTS (SELECT * FROM Rezerwacje AS R WHERE R.Id_ksiazki = id AND R.Id_karty = karta) THEN
			IF ((SELECT COUNT(R.Id_rezerwacji) FROM Rezerwacje AS R WHERE R.Id_karty = karta) < 7) THEN    
				SET kolejkowicze = (SELECT COUNT(R.Id_rezerwacji) FROM Rezerwacje AS R WHERE R.Id_ksiazki = id) + 1;
				SELECT Add_rezerwacja(karta,tytul,kolejkowicze) FROM dual;
			END IF;
		END IF;
    END IF;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `DodawanieWypozyczenia`(karta INT, egzemplarz INT, bibliotekarz INT)
BEGIN		
	IF EXISTS (SELECT * FROM Czytelnicy AS C WHERE C.Id_karty = karta)     THEN
		IF ((SELECT E.Dostepny FROM Egzemplarze AS E WHERE E.Id_egzemplarza = egzemplarz) = 1) THEN
			IF ((SELECT COUNT(W.Id_wypozyczenia) FROM Wypozyczenia AS W WHERE W.Id_karty = karta) < 5) THEN    
				SELECT Add_wypozyczenie(karta,egzemplarz,bibliotekarz) FROM dual;
			END IF;
        END IF;
    END IF;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `UsunRezerwacje`(rezerwacja INT)
BEGIN
	DECLARE numerek INT DEFAULT NULL;
    DECLARE id INT DEFAULT NULL;

    SET numerek = (SELECT R.Numer_w_kolejce FROM Rezerwacje AS R WHERE R.Id_rezerwacji = rezerwacja);
    SET id = (SELECT R.Id_ksiazki FROM Rezerwacje AS R WHERE R.Id_rezerwacji = rezerwacja);
    
	UPDATE Rezerwacje AS R SET R.Numer_w_kolejce = R.Numer_w_kolejce - 1 WHERE R.Id_ksiazki = id AND R.Numer_w_kolejce > numerek;
    DELETE FROM Rezerwacje WHERE Id_rezerwacji = rezerwacja;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `UsunWypozyczenie`(wypo INT)
BEGIN
	UPDATE Egzemplarze AS E,Wypozyczenia AS W SET E.Dostepny = 1 WHERE E.Id_egzemplarza = W.Id_egzemplarza AND Id_wypozyczenia = wypo;
    DELETE FROM Wypozyczenia WHERE Id_wypozyczenia = wypo;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `UsunCzytelnika`(karta INT)
BEGIN
	DECLARE numerek INT DEFAULT NULL;
    DECLARE id INT DEFAULT NULL;
	
  	IF NOT EXISTS (SELECT * FROM Wypozyczenia AS W WHERE W.Id_karty = karta) THEN
		UPDATE Rezerwacje AS R, (SELECT * FROM Rezerwacje AS U WHERE U.Id_karty = karta) AS I SET R.Numer_w_kolejce = R.Numer_w_kolejce - 1 WHERE R.Id_rezerwacji = I.Id_rezerwacji AND R.Numer_w_kolejce > I.Numer_w_kolejce;
		
    DELETE FROM Rezerwacje WHERE Id_karty = karta;
    DELETE FROM Czytelnicy WHERE Id_karty = karta;
	END IF;
END
